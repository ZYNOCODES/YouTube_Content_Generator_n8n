{
  "name": "Content Generator v4 Fixed",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "fetch-videos",
        "responseMode": "lastNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -944,
        -320
      ],
      "id": "4c17597a-6b5c-4fb4-a3b8-a1295f0cca65",
      "name": "Webhook Start",
      "webhookId": "e20a6fe3-24ce-47f9-b845-cc63f0d886c7"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "channel-url",
              "name": "channelURL",
              "value": "={{ $json.body.channelUrl }}",
              "type": "string"
            },
            {
              "id": "api-key",
              "name": "API_KEY",
              "value": "AIzaSyBQb8tbihJmrCfTb203WYsM9WpSB4dd7CY",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -768,
        -320
      ],
      "id": "b667d7a6-59aa-4b2a-8c61-c01ba3bd494b",
      "name": "Extract Parameters"
    },
    {
      "parameters": {
        "jsCode": "// Extract channel ID from YouTube URL\nconst channelURL = $json.channelURL;\nlet channelID = '';\n\n// Handle different YouTube URL formats\nif (channelURL.includes('youtube.com/channel/')) {\n  // Format: https://www.youtube.com/channel/UCxxxxxx\n  channelID = channelURL.split('channel/')[1].split(/[?&/]/)[0];\n} else if (channelURL.includes('youtube.com/c/')) {\n  // Format: https://www.youtube.com/c/channelname\n  // This requires an additional API call to resolve custom URL\n  channelID = channelURL.split('/c/')[1].split(/[?&/]/)[0];\n  // Mark as custom URL for later resolution\n  return [{ json: { channelID: channelID, isCustomURL: true, API_KEY: $json.API_KEY } }];\n} else if (channelURL.includes('youtube.com/@')) {\n  // Format: https://www.youtube.com/@handle\n  const handle = channelURL.split('/@')[1].split(/[?&/]/)[0];\n  return [{ json: { channelID: '@' + handle, isHandle: true, API_KEY: $json.API_KEY } }];\n} else if (channelURL.includes('youtube.com/user/')) {\n  // Format: https://www.youtube.com/user/username\n  const username = channelURL.split('/user/')[1].split(/[?&/]/)[0];\n  return [{ json: { channelID: username, isUsername: true, API_KEY: $json.API_KEY } }];\n} else if (channelURL.match(/^UC[a-zA-Z0-9_-]{22}$/)) {\n  // Direct channel ID\n  channelID = channelURL;\n} else {\n  throw new Error('Invalid YouTube channel URL format');\n}\n\nreturn [{ json: { channelID: channelID, API_KEY: $json.API_KEY } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -592,
        -320
      ],
      "id": "90c5ccff-9181-40f1-bc49-646da306ff61",
      "name": "Extract Channel ID"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/channels",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "contentDetails"
            },
            {
              "name": "={{ $json.isUsername ? 'forUsername' : $json.isHandle ? 'forHandle' : 'id' }}",
              "value": "={{ $json.channelID }}"
            },
            {
              "name": "key",
              "value": "={{ $json.API_KEY }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -400,
        -320
      ],
      "id": "a0d48489-34af-4dcf-a611-2d40a9a3ef3e",
      "name": "Get Channel Details"
    },
    {
      "parameters": {
        "jsCode": "// Extract uploads playlist ID\nconst items = $input.all();\nif (!items[0]?.json?.items?.[0]?.contentDetails?.relatedPlaylists?.uploads) {\n  throw new Error('Channel not found or no uploads playlist available');\n}\n\nconst playlistId = items[0].json.items[0].contentDetails.relatedPlaylists.uploads;\nreturn [{ json: { playlistId } }];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -208,
        -320
      ],
      "id": "c9940fcc-d6d8-425f-8b7e-09346f9f6344",
      "name": "Extract Playlist ID"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/playlistItems",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "snippet"
            },
            {
              "name": "playlistId",
              "value": "={{ $json.playlistId }}"
            },
            {
              "name": "maxResults",
              "value": "50"
            },
            {
              "name": "order",
              "value": "date"
            },
            {
              "name": "key",
              "value": "={{ $('Extract Parameters').item.json.API_KEY }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        -320
      ],
      "id": "79a2ecd6-35d5-4b3b-a68f-2bebed8733ce",
      "name": "Get Recent Videos"
    },
    {
      "parameters": {
        "jsCode": "// Process playlist items and get video IDs\nconst items = $input.all();\nconst videos = [];\n\nfor (const item of items) {\n  if (item.json?.items) {\n    for (const video of item.json.items.slice(0, 10)) {\n      if (video.snippet?.resourceId?.videoId) {\n        videos.push({\n          videoId: video.snippet.resourceId.videoId,\n          title: video.snippet.title,\n          thumbnail: video.snippet.thumbnails?.default?.url || video.snippet.thumbnails?.medium?.url,\n          publishedAt: video.snippet.publishedAt,\n          description: video.snippet.description\n        });\n      }\n    }\n  }\n}\n\nreturn videos.map(video => ({ json: video }));"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        192,
        -320
      ],
      "id": "03d7e233-71ec-481e-8edc-8e7cc57e6c4c",
      "name": "Process Video List"
    },
    {
      "parameters": {
        "url": "https://www.googleapis.com/youtube/v3/videos",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "part",
              "value": "statistics,snippet,contentDetails"
            },
            {
              "name": "id",
              "value": "={{ $json.videoId }}"
            },
            {
              "name": "key",
              "value": "={{ $('Extract Parameters').item.json.API_KEY }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        384,
        -320
      ],
      "id": "bf520011-f746-4a41-92b1-5f8891840d84",
      "name": "Get Video Statistics"
    },
    {
      "parameters": {
        "jsCode": "// Process video statistics and calculate metrics\nconst items = $input.all();\nconst processedVideos = [];\n\nfor (const item of items) {\n  if (item.json?.items?.[0]) {\n    const video = item.json.items[0];\n    const statistics = video.statistics || {};\n    const snippet = video.snippet || {};\n    const contentDetails = video.contentDetails || {};\n    \n    const views = parseInt(statistics.viewCount || '0', 10);\n    const likes = parseInt(statistics.likeCount || '0', 10);\n    const comments = parseInt(statistics.commentCount || '0', 10);\n    \n    const publishedAt = new Date(snippet.publishedAt);\n    const now = new Date();\n    const hoursSince = Math.max(1, (now - publishedAt) / (1000 * 60 * 60));\n    const vph = parseFloat((views / hoursSince).toFixed(2));\n    \n    // Parse duration\n    const duration = contentDetails.duration || 'PT0S';\n    const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n    const hours = parseInt(match[1] || '0', 10);\n    const minutes = parseInt(match[2] || '0', 10);\n    const seconds = parseInt(match[3] || '0', 10);\n    const totalSeconds = hours * 3600 + minutes * 60 + seconds;\n    \n    processedVideos.push({\n      id: video.id,\n      title: snippet.title,\n      thumbnail: snippet.thumbnails?.medium?.url || snippet.thumbnails?.default?.url,\n      viewCount: views,\n      likeCount: likes,\n      commentCount: comments,\n      publishedAt: snippet.publishedAt,\n      duration: totalSeconds,\n      vph: vph,\n      description: snippet.description || ''\n    });\n  }\n}\n\nconst lasttop30 = processedVideos.slice(0, 30);\n\nreturn { \n  json: { \n    success: true, \n    videos: lasttop30.sort((a, b) => b.vph - a.vph)\n  } \n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        576,
        -320
      ],
      "id": "7907e295-03f7-49b7-84c4-cd2c2ae29307",
      "name": "Format Response"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        768,
        -320
      ],
      "id": "9e4d785f-8cbd-4c70-b788-1b528328e00b",
      "name": "Webhook Response"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "process-video",
        "responseMode": "lastNode",
        "options": {
          "allowedOrigins": "*"
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1.1,
      "position": [
        -880,
        80
      ],
      "id": "98a83287-7050-4b3b-a99d-adac2e7ceb54",
      "name": "Webhook Start Process",
      "webhookId": "7216b0a0-959a-41ef-84e5-02b10ffff65b"
    },
    {
      "parameters": {
        "jsCode": "// Extract parameters and setup for content generation\nconst body = $json.body;\nconst selectedVideo = body.selectedVideo;\nconst selectedType = body.selectedType;\nconst selectedPrompt = body.selectedPrompt;\n\nreturn [{\n  json: {\n    videoTitle: selectedVideo.title,\n    videoId: selectedVideo.id,\n    selectedType: selectedType,\n    imagePrompt: selectedPrompt,\n    videoData: selectedVideo\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -672,
        80
      ],
      "id": "f03a3427-7091-404b-a38c-f130f4058cb6",
      "name": "Extract & Setup"
    },
    {
      "parameters": {
        "resource": "image",
        "prompt": "={{ $json.imagePrompt }}\nThe input: {{ $json.videoTitle }}\nIMPORTANT: Create a high-resolution, cute cartoon-style illustration for children.\nRules:\n- Bright, cheerful, solid colors (no gradients or photo realism).\n- Thick, clean black outlines around all shapes.\n- Subject must be clearly recognizable, centered, and fill most of the frame.\n- Plain white or light pastel background (minimal distractions).\n- Style should be simple, friendly, and fun to color.\n- Maintain consistent proportions and clear separation between color regions.\n- Image ratio: 1792x1024.",
        "options": {
          "size": "1792x1024",
          "returnImageUrls": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -480,
        80
      ],
      "id": "e17835ac-edda-4082-9bdc-a113b62c439a",
      "name": "Generate Colored Image",
      "credentials": {
        "openAiApi": {
          "id": "0Uw2iu4BKd7gpbmg",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Download the image from OpenAI URL and prepare for conversion\nconst imageData = $json;\nconst originalData = $('Extract & Setup').item.json;\n\nlet imageUrl = null;\nlet coloredImageBinary = null;\n\n// Check if we got a URL or binary data\nif (imageData.url) {\n  imageUrl = imageData.url;\n  \n  // Download the image\n  const response = await fetch(imageUrl);\n  if (!response.ok) {\n    throw new Error(`Failed to download image: ${response.status}`);\n  }\n  \n  const arrayBuffer = await response.arrayBuffer();\n  coloredImageBinary = Buffer.from(arrayBuffer);\n  \n} else if ($binary?.data) {\n  // We have binary data directly\n  coloredImageBinary = $binary.data;\n} else {\n  throw new Error('No image data received from OpenAI');\n}\n\nif (!coloredImageBinary || !Buffer.isBuffer(coloredImageBinary)) {\n  throw new Error('Invalid image data received');\n}\n\n// Convert binary to base64 for the editing API\nconst base64Image = coloredImageBinary.toString('base64');\n\nreturn [{\n  json: {\n    base64Image: base64Image,\n    imageUrl: imageUrl,\n    videoTitle: originalData.videoTitle,\n    imagePrompt: originalData.imagePrompt\n  },\n  binary: {\n    coloredImage: coloredImageBinary\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -272,
        80
      ],
      "id": "download-image-binary",
      "name": "Download Image Binary"
    },
    {
      "parameters": {
        "resource": "image",
        "operation": "edit",
        "imageInput": "={{ $json.base64Image }}",
        "prompt": "Convert this colored children's illustration into a pure black-and-white coloring book page. Keep the exact same composition, characters, poses, and details but remove ALL colors. Use only pure black outlines on a plain white background. NO colors, NO gray, NO shading, NO fills. Maintain clean, thick lines suitable for children's coloring books. Ensure all elements are clearly outlined and ready to color.",
        "options": {
          "size": "1792x1024",
          "returnImageUrls": true
        }
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -64,
        80
      ],
      "id": "convert-to-bw",
      "name": "Convert to B&W",
      "credentials": {
        "openAiApi": {
          "id": "0Uw2iu4BKd7gpbmg",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Download the B&W image and create file objects\nconst bwImageData = $json;\nconst coloredImageBinary = $('Download Image Binary').item.binary.coloredImage;\nconst originalData = $('Extract & Setup').item.json;\n\nlet bwImageBinary = null;\n\n// Download B&W image\nif (bwImageData.url) {\n  const response = await fetch(bwImageData.url);\n  if (!response.ok) {\n    throw new Error(`Failed to download B&W image: ${response.status}`);\n  }\n  \n  const arrayBuffer = await response.arrayBuffer();\n  bwImageBinary = Buffer.from(arrayBuffer);\n  \n} else if ($binary?.data) {\n  bwImageBinary = $binary.data;\n} else {\n  throw new Error('No B&W image data received');\n}\n\nif (!bwImageBinary || !Buffer.isBuffer(bwImageBinary)) {\n  throw new Error('Invalid B&W image data received');\n}\n\n// Convert both images to base64\nconst coloredImageBase64 = coloredImageBinary.toString('base64');\nconst bwImageBase64 = bwImageBinary.toString('base64');\n\n// Create file objects for React client\nconst cleanTitle = originalData.videoTitle.replace(/[^a-zA-Z0-9\\s]/g, '').substring(0, 30);\n\nconst coloredImageFile = {\n  data: coloredImageBase64,\n  name: `${cleanTitle}_colored.png`,\n  type: 'image/png',\n  size: coloredImageBinary.length\n};\n\nconst bwImageFile = {\n  data: bwImageBase64,\n  name: `${cleanTitle}_coloring_page.png`,\n  type: 'image/png',\n  size: bwImageBinary.length\n};\n\nreturn [{\n  json: {\n    coloredImageFile: coloredImageFile,\n    bwImageFile: bwImageFile,\n    videoTitle: originalData.videoTitle\n  },\n  binary: {\n    coloredImage: coloredImageBinary,\n    bwImage: bwImageBinary\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        80
      ],
      "id": "create-file-objects",
      "name": "Download B&W and Create Files"
    },
    {
      "parameters": {
        "modelId": {
          "__rl": true,
          "value": "gpt-4",
          "mode": "list",
          "cachedResultName": "GPT-4"
        },
        "messages": {
          "values": [
            {
              "content": "=Create a 700-word script for children based on the following video title. The script should be educational, engaging, and include both learning lessons and pretend play elements. Include a clear introduction and conclusion.\nVideo Title: {{ $('Extract & Setup').item.json.videoTitle }}\nMake the script in English and ensure it's age-appropriate for children aged 4-8 years old."
            }
          ]
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.openAi",
      "typeVersion": 1.8,
      "position": [
        -480,
        336
      ],
      "id": "6e7d2dbb-29cf-4ff2-8468-7cb271e4b3d5",
      "name": "Generate Script",
      "credentials": {
        "openAiApi": {
          "id": "0Uw2iu4BKd7gpbmg",
          "name": "OpenAi account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        352,
        240
      ],
      "id": "8c696514-5224-40ca-bd89-430c0f750bd2",
      "name": "Merge All Results"
    },
    {
      "parameters": {
        "jsCode": "// Combine all generated content with file objects\nconst items = $input.all();\nconst originalData = $('Extract & Setup').item.json;\n\nlet imagesData = null;\nlet scriptData = null;\n\n// Process merged items\nfor (let i = 0; i < items.length; i++) {\n  const item = items[i];\n  const data = item.json;\n  \n  // Check for images file objects\n  if (data.coloredImageFile && data.bwImageFile) {\n    imagesData = {\n      colored: data.coloredImageFile,\n      blackWhite: data.bwImageFile\n    };\n  }\n  \n  // Check for script content\n  if (data.message && data.message.content) {\n    scriptData = {\n      content: data.message.content,\n      wordCount: data.message.content.split(/\\s+/).length\n    };\n  }\n  \n  if (data.choices && data.choices[0]?.message?.content) {\n    scriptData = {\n      content: data.choices[0].message.content,\n      wordCount: data.choices[0].message.content.split(/\\s+/).length\n    };\n  }\n}\n\n// Combine all results\nconst finalResult = {\n  success: true,\n  timestamp: new Date().toISOString(),\n  data: {\n    video: {\n      title: originalData?.videoTitle || '',\n      id: originalData?.videoId || '',\n      type: originalData?.selectedType || ''\n    },\n    generatedContent: {\n      images: imagesData,\n      script: scriptData || {\n        content: '',\n        wordCount: 0\n      }\n    },\n    processingInfo: {\n      completedAt: new Date().toISOString(),\n      status: 'completed',\n      note: 'Images are identical - B&W version created from colored version',\n      workflow: 'v4-fixed'\n    }\n  }\n};\n\nreturn { json: finalResult };"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        240
      ],
      "id": "7d68ff9c-df48-46b9-9a86-eafd3120772b",
      "name": "Final Combine Results"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        768,
        240
      ],
      "id": "bc7b81b0-4947-402c-9de4-a85588bbfcbb",
      "name": "Webhook Response Process"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook Start": {
      "main": [
        [
          {
            "node": "Extract Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Parameters": {
      "main": [
        [
          {
            "node": "Extract Channel ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Channel ID": {
      "main": [
        [
          {
            "node": "Get Channel Details",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Channel Details": {
      "main": [
        [
          {
            "node": "Extract Playlist ID",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Playlist ID": {
      "main": [
        [
          {
            "node": "Get Recent Videos",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Recent Videos": {
      "main": [
        [
          {
            "node": "Process Video List",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Video List": {
      "main": [
        [
          {
            "node": "Get Video Statistics",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Video Statistics": {
      "main": [
        [
          {
            "node": "Format Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format Response": {
      "main": [
        [
          {
            "node": "Webhook Response",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Start Process": {
      "main": [
        [
          {
            "node": "Extract & Setup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract & Setup": {
      "main": [
        [
          {
            "node": "Generate Colored Image",
            "type": "main",
            "index": 0
          },
          {
            "node": "Generate Script",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Colored Image": {
      "main": [
        [
          {
            "node": "Download Image Binary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Image Binary": {
      "main": [
        [
          {
            "node": "Convert to B&W",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to B&W": {
      "main": [
        [
          {
            "node": "Download B&W and Create Files",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download B&W and Create Files": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Generate Script": {
      "main": [
        [
          {
            "node": "Merge All Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge All Results": {
      "main": [
        [
          {
            "node": "Final Combine Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Final Combine Results": {
      "main": [
        [
          {
            "node": "Webhook Response Process",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "fixed-v4",
  "meta": {
    "instanceId": "fixed-content-generator"
  },
  "id": "FixedContentGen",
  "tags": []
}